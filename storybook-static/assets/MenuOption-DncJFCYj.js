import{j as r}from"./jsx-runtime-SKoiH9zj.js";import{r as d}from"./index-DJO9vBfz.js";import{I as P}from"./Icon-BnrH6PuI.js";import{c as k}from"./index-NZcV-alF.js";import{T as H}from"./Tooltip-jHEmaokv.js";import{T as I}from"./Typography-DdMJCn-_.js";import{r as D}from"./index-CFN9ZEHn.js";import{a as A}from"./ThemeProvider-D5XEyBwi.js";import{u as $}from"./useClickOutside-BYc9KT_v.js";const M=e=>typeof e=="string"?document.getElementById(e):(e==null?void 0:e.current)||null,R=({option:e,onClick:p})=>r.jsxs("div",{className:k("ff-options",{"ff-disable-option":e.disable}),onClick:()=>!e.disable&&p(e),children:[e.icon&&r.jsx(P,{name:e.icon,color:e.iconColor,height:16,width:16}),r.jsx(I,{as:"label",lineHeight:"18px",color:e.icon==="delete"?"var(--delete-text-color)":"",children:e.label})]}),W=(e,p,u)=>{const{top:i,left:a,height:m,width:l}=e,c={top:i,bottom:window.innerHeight-(i+m),left:a,right:window.innerWidth-(a+l)},n=2;let o=i,s=a;switch(p){case"top":o=c.top>u+n?i-u-n:i+m+n;break;case"down":o=c.bottom>u+n?i+m+n:i-u-n;break;case"left":s=c.left>l+n?a-l-n:a+l+n;break;case"right":s=c.right>l+n?a+l+n:a-l-n;break;default:o=i,s=a}return o=Math.max(0,Math.min(o,window.innerHeight-u)),s=Math.max(0,Math.min(s,window.innerWidth-l)),{top:o,left:s}},X=({options:e,onClick:p,menuPosition:u,menuRef:i,closeDropdown:a,zIndex:m=1500,dropdownPlacement:l,variant:c,isAddResourceButton:n})=>{const o=d.useContext(A),s=o==null?void 0:o.currentTheme,b=d.useRef(null),[v,w]=d.useState(0);$(i,a,[b]),d.useEffect(()=>{b.current&&w(b.current.offsetHeight)},[e]);const f=W(u,l,v);return D.createPortal(r.jsx("div",{className:k("ff-option-card",{"ff-option-card--primary":c==="primary"},{"ff-option-card--default":c==="default"},s),style:{...f,zIndex:m,margin:n?"0px":"4px"},ref:b,children:e.map(h=>!h.hide&&r.jsx(R,{option:h,onClick:p},h.value))}),document.body)},N=({labelName:e,iconName:p,tooltipTitle:u,tooltipPlacement:i="bottom",options:a=[],onClick:m=()=>{},onOptionClick:l=()=>{},iconButtonSize:c=20,iconButtonBorderRadius:n=7,iconSize:o=16,variant:s="light",zIndex:b=1500,dropdownPlacement:v="down",optionCardVariant:w,targetRef:f=null,treeRowRef:h,isAddResourceButton:T,disabled:V})=>{const[g,y]=d.useState(!1),q=d.useRef(null),x=d.useRef(null),[B,L]=d.useState({top:0,left:0,height:0,right:0,width:0}),C=()=>y(!1);d.useEffect(()=>{if(f){const t=M(f);t==null||t.classList.toggle("hover",g)}return()=>{if(f){const t=M(f);t==null||t.classList.remove("hover")}}},[g,f]),d.useEffect(()=>{const t=()=>{y(!1)};return window.addEventListener("scroll",t,{passive:!0}),()=>{window.removeEventListener("scroll",t)}},[]);const _=()=>{V||(m(),S(),y(t=>!t))},z=t=>{var j,O,E;(E=(O=(j=h==null?void 0:h.current)==null?void 0:j.children[0])==null?void 0:O.children[2])==null||E.classList.remove("table-row-add-button"),l(t),C()},S=()=>{if(x.current){const t=x.current.getBoundingClientRect();L({top:t.top+window.scrollY,left:t.left+window.scrollX,height:t.height,right:t.right,width:t.width})}};return r.jsxs("div",{className:"ff-menu-option-container",ref:q,children:[r.jsx(H,{title:u,placement:i,children:r.jsxs("div",{className:"ff-icon-label",children:[r.jsx("div",{className:k("ff-menuicon-container",{"ff-menuicon-container-clicked":g,dark:s==="dark","ff-menuicon-container-add-resource":T}),ref:x,onClick:_,style:{width:`${c}px`,height:`${c}px`,borderRadius:`${n}px`},children:r.jsx(P,{height:o,width:o,name:p,disabled:V,color:g===(s==="dark")?"var(--menu-option-icon-clicked)":"var(--menu-option-icon-color)"})}),e&&r.jsx(I,{as:"label",children:e})]})}),g&&r.jsx(X,{options:a,onClick:z,menuPosition:B,menuRef:q,closeDropdown:C,zIndex:b,dropdownPlacement:v,variant:w,isAddResourceButton:T})]})};try{N.displayName="MenuOption",N.__docgenInfo={description:"",displayName:"MenuOption",props:{labelName:{defaultValue:null,description:`The name of the label displayed next to the icon.
@optional`,name:"labelName",required:!1,type:{name:"{string}"}},iconName:{defaultValue:null,description:`The name of the icon to be displayed.
@required`,name:"iconName",required:!0,type:{name:"{string}"}},options:{defaultValue:{value:"[]"},description:`The list of options available in the dropdown.
@required`,name:"options",required:!1,type:{name:"{Array<OptionType>}"}},tooltipTitle:{defaultValue:null,description:`The title displayed in the tooltip when hovering over the icon.
@optional`,name:"tooltipTitle",required:!1,type:{name:"{string}"}},tooltipPlacement:{defaultValue:{value:"bottom"},description:`The placement of the tooltip relative to the icon.
@optional`,name:"tooltipPlacement",required:!1,type:{name:"{'bottom' | 'left' | 'right' | 'top' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end'}"}},dropdownPlacement:{defaultValue:{value:"down"},description:`The placement of the dropdown menu relative to the icon.
@optional`,name:"dropdownPlacement",required:!1,type:{name:"{dropdownPosition}"}},variant:{defaultValue:{value:"light"},description:`The variant of the menu option, either 'dark' or 'light'.
@optional`,name:"variant",required:!1,type:{name:"{'dark' | 'light'}"}},onClick:{defaultValue:{value:"() => {}"},description:`Callback function triggered when the icon is clicked.
@optional`,name:"onClick",required:!1,type:{name:"{() => void}"}},onOptionClick:{defaultValue:{value:"() => {}"},description:`Callback function triggered when an option is clicked.
@param option - The option that was clicked.
@optional`,name:"onOptionClick",required:!1,type:{name:"{(option: OptionClick) => void}"}},iconButtonSize:{defaultValue:{value:"20"},description:"The size of the icon button.",name:"iconButtonSize",required:!1,type:{name:"{number}"}},iconSize:{defaultValue:{value:"16"},description:"The size of the icon.",name:"iconSize",required:!1,type:{name:"{number}"}},iconButtonBorderRadius:{defaultValue:{value:"7"},description:"The border radius of the icon button.",name:"iconButtonBorderRadius",required:!1,type:{name:"{number}"}},zIndex:{defaultValue:{value:"1500"},description:`Providing z-index for the options card.
@optional`,name:"zIndex",required:!1,type:{name:"{number}"}},optionCardVariant:{defaultValue:null,description:`Variant for backgroung color of options card.
@optional`,name:"optionCardVariant",required:!1,type:{name:"{string}"}},targetRef:{defaultValue:{value:"null"},description:"",name:"targetRef",required:!1,type:{name:"string | RefObject<HTMLElement> | null"}},treeRowRef:{defaultValue:null,description:"",name:"treeRowRef",required:!1,type:{name:"RefObject<HTMLDivElement | null>"}},isAddResourceButton:{defaultValue:null,description:"",name:"isAddResourceButton",required:!1,type:{name:"boolean"}},disabled:{defaultValue:null,description:`to enable or disable the options card.
@optional`,name:"disabled",required:!1,type:{name:"{boolean}"}}}}}catch{}export{N as M};
