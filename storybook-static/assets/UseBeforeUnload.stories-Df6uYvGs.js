import{j as r}from"./jsx-runtime-SKoiH9zj.js";import{r as d}from"./index-DJO9vBfz.js";const n=e=>{d.useEffect(()=>{const o=c=>{e&&c.preventDefault()};return window.addEventListener("beforeunload",o),()=>{window.removeEventListener("beforeunload",o)}},[e])};try{n.displayName="useBeforeUnload",n.__docgenInfo={description:"",displayName:"useBeforeUnload",props:{}}}catch{}const u={title:"Utils/BeforeUnloadHandler",argTypes:{isPreventUnloadEnabled:{control:"boolean",description:"If true, prevents reload or tab closure by triggering a beforeunload prompt."}}},i=()=>{const[e,o]=d.useState(!1);return n(e),r.jsxs("div",{children:[r.jsx("h3",{children:`useBeforeUnload(${e})`}),r.jsx("p",{children:e?"User cannot reload or close the tab.":"User can reload or close the tab."}),r.jsx("p",{children:e?"A beforeunload prompt will show if the user tries to leave the page.":"No beforeunload prompt will appear."}),r.jsx("button",{onClick:()=>o(!e),children:"Toggle Prevent Unload"})]})},t={render:()=>r.jsx(i,{})};var a,s,l;t.parameters={...t.parameters,docs:{...(a=t.parameters)==null?void 0:a.docs,source:{originalSource:`{
  render: () => <BeforeUnloadHandler />
}`,...(l=(s=t.parameters)==null?void 0:s.docs)==null?void 0:l.source}}};const m=["Default"];export{t as Default,m as __namedExportsOrder,u as default};
