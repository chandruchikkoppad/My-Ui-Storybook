import{j as e}from"./jsx-runtime-SKoiH9zj.js";import{r as a}from"./index-DJO9vBfz.js";import{c as m}from"./index-NZcV-alF.js";import{c as I}from"./checkEmpty-xi6SckPb.js";import{I as w}from"./Icon-BnrH6PuI.js";import{T as $}from"./Typography-DdMJCn-_.js";const u=({label:i="",icon:d=e.jsx(w,{name:"arrow_right",height:5,width:8,color:"var(--icons-default-color)"}),variant:t="primary",size:o="medium",disable:f=!1,subMenus:g=[],selectedMenu:R="",onSubMenuClick:C=()=>{},menuExpandStatus:k})=>{const[s,b]=a.useState(k||!1),[_,c]=a.useState(!1),A=()=>{b(n=>!n),c(!1)},j=a.useCallback(()=>{s||c(!0)},[s]),q=a.useCallback(()=>{s||c(!1)},[s]),V=n=>{f||(C(n),b(!0))},p=s||_;return e.jsxs("div",{className:m("ff-expandable-chip-menu",`ff-expandable-chip-menu--${t}`,{"ff-expandable-chip-menu--disabled":f,expanded:p}),onMouseEnter:j,onMouseLeave:q,children:[e.jsxs("div",{className:`ff-label-chip ff-label-chip--${t} ff-expandable-chip-menu--${o}`,onClick:A,children:[e.jsx($,{children:i}),e.jsx("span",{className:"arrow-icon",children:d})]}),p&&!I(g)&&e.jsx("div",{className:m("ff-sub-chips",{expanded:p}),children:g.map((n,N)=>e.jsx("div",{className:m("ff-sub-chip",`ff-sub-chip--${t}`,`ff-sub-chip--${o}`,{selected:R===n}),onClick:()=>V(n),children:n},N))})]})};try{u.displayName="ExpandableMenu",u.__docgenInfo={description:"",displayName:"ExpandableMenu",props:{label:{defaultValue:{value:""},description:"mandatory | label for the expandable menu",name:"label",required:!1,type:{name:"string"}},icon:{defaultValue:{value:`(\r
    <Icon\r
      name="arrow_right"\r
      height={5}\r
      width={8}\r
      color={'var(--icons-default-color)'}\r
    />\r
  )`},description:"optional | Icon to describe direction of expansion",name:"icon",required:!1,type:{name:"ReactNode"}},variant:{defaultValue:{value:"primary"},description:"optional | variant of the menu",name:"variant",required:!1,type:{name:"enum",value:[{value:'"primary"'}]}},size:{defaultValue:{value:"medium"},description:"optional | size of the expandable menu",name:"size",required:!1,type:{name:"enum",value:[{value:'"medium"'}]}},disable:{defaultValue:{value:"false"},description:"optional | disable to disable the menu and prevent click events but not hover event",name:"disable",required:!1,type:{name:"boolean"}},subMenus:{defaultValue:{value:"[]"},description:"Mandatory |  sub menus to be shown inside  expandable menu",name:"subMenus",required:!1,type:{name:"string[]"}},selectedMenu:{defaultValue:{value:""},description:"optional | selected sub menu of the expandable menu",name:"selectedMenu",required:!1,type:{name:"string"}},onSubMenuClick:{defaultValue:{value:"() => {}"},description:"optional | onSubMenuClick event to perform action on click of sub menu",name:"onSubMenuClick",required:!1,type:{name:"((subChip: any) => void)"}},menuExpandStatus:{defaultValue:null,description:"",name:"menuExpandStatus",required:!1,type:{name:"boolean"}}}}}catch{}const O={title:"Components/ExpandableMenu",component:u,parameters:{layout:"left"},argTypes:{disable:Boolean},tags:["autodocs"]},S={label:"Execution Settings",disable:!1},r={args:{...S,subMenus:["Environment settings","Run settings","Report settings","Additional settings","Environment settings","Run settings","Report settings","Additional settings","Environment settings","Run settings","Report settings","Additional settings"]}},l={render:()=>{const[i,d]=a.useState(""),t=o=>{d(o)};return e.jsx(u,{...S,subMenus:["Environment settings","Run settings","Report settings","Additional settings"],selectedMenu:i,onSubMenuClick:t})}};var h,v,x;r.parameters={...r.parameters,docs:{...(h=r.parameters)==null?void 0:h.docs,source:{originalSource:`{
  args: {
    ...defaultArgs,
    subMenus: ['Environment settings', 'Run settings', 'Report settings', 'Additional settings', 'Environment settings', 'Run settings', 'Report settings', 'Additional settings', 'Environment settings', 'Run settings', 'Report settings', 'Additional settings']
  }
}`,...(x=(v=r.parameters)==null?void 0:v.docs)==null?void 0:x.source}}};var M,y,E;l.parameters={...l.parameters,docs:{...(M=l.parameters)==null?void 0:M.docs,source:{originalSource:`{
  render: () => {
    const [selectedMenu, setSelectedMenu] = useState<string>('');
    const onSubMenuClick = (chip: string) => {
      setSelectedMenu(chip);
    };
    return <ExpandableMenu {...defaultArgs} subMenus={['Environment settings', 'Run settings', 'Report settings', 'Additional settings']} selectedMenu={selectedMenu} onSubMenuClick={onSubMenuClick} />;
  }
}`,...(E=(y=l.parameters)==null?void 0:y.docs)==null?void 0:E.source}}};const D=["Primary","Controlled"];export{l as Controlled,r as Primary,D as __namedExportsOrder,O as default};
